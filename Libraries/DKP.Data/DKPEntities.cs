//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DKP.Data
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.Common;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.ModelConfiguration.Conventions;
    using System.Linq;
    using DKP.Core.Data;
    using System.Data.SqlClient;

    public partial class DKPEntities : DbContext, IDbContext
    {
        public DKPEntities(string nameOrConnectionString)
            : base(nameOrConnectionString)
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            // 移除复数表名的契约
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();
            // 不用检测__MigrationHistory
            Database.SetInitializer<DKPEntities>(null);
            //移除decimal默认（18,2），修改为（18,6）
            modelBuilder.Conventions.Remove<DecimalPropertyConvention>();
            modelBuilder.Conventions.Add(new DecimalPropertyConvention(18, 6));
            base.OnModelCreating(modelBuilder);
        }

        public virtual DbSet<Dictionary> Dictionaries { get; set; }
        public virtual DbSet<DictionaryGroup> DictionaryGroups { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Attachment> Attachments { get; set; }

        public virtual DbSet<ScheduleTask> ScheduleTasks { get; set; }
        public virtual DbSet<Notice> Notices { get; set; }
        public virtual DbSet<Mail> Mails { get; set; }
        public virtual DbSet<MailItem> MailItems { get; set; }
        public virtual DbSet<Activity> Activitys { get; set; }
        public virtual DbSet<ActivityItem> ActivityItems { get; set; }
        public virtual DbSet<ActivityServer> ActivityServers { get; set; }
        public virtual DbSet<ActivityInfo> ActivityInfos { get; set; }
        #region Utilities

        /// <summary>
        /// Attach an entity to the context or return an already attached entity (if it was already attached)
        /// </summary>
        /// <typeparam name="TEntity">TEntity</typeparam>
        /// <param name="entity">Entity</param>
        /// <returns>Attached entity</returns>
        public virtual TEntity AttachEntityToContext<TEntity>(TEntity entity) where TEntity : BaseEntity, new()
        {
            //little hack here until Entity Framework really supports stored procedures
            //otherwise, navigation properties of loaded entities are not loaded until an entity is attached to the context
            var alreadyAttached = Set<TEntity>().Local.FirstOrDefault(x => x.Id == entity.Id);
            if (alreadyAttached == null)
            {
                //attach new entity
                Set<TEntity>().Attach(entity);
                return entity;
            }

            //entity is already loaded
            return alreadyAttached;
        }

        #endregion

        #region Methods

        public void Modified<TEntity>(TEntity entity) where TEntity : BaseEntity
        {
            var alreadyAttached = Set<TEntity>().Local.FirstOrDefault(x => x.Id == entity.Id);
            if (alreadyAttached != null)
            {
                entity.Id = alreadyAttached.Id;
                this.Entry(alreadyAttached).State = EntityState.Detached;
                this.Set<TEntity>().Attach(entity);
            }
            this.Entry(entity).State = EntityState.Modified;
        }

        public new IDbSet<TEntity> Set<TEntity>() where TEntity : BaseEntity
        {
            return base.Set<TEntity>();
        }

        public IList<TEntity> ExecuteStoredProcedureList<TEntity>(string commandText, params object[] parameters) where TEntity : BaseEntity, new()
        {
            //add parameters to command
            if (parameters != null && parameters.Length > 0)
            {
                for (int i = 0; i <= parameters.Length - 1; i++)
                {
                    var p = parameters[i] as DbParameter;
                    if (p == null)
                        throw new Exception("参数类型不支持");

                    commandText += i == 0 ? " " : ", ";

                    commandText += "@" + p.ParameterName;
                    if (p.Direction == ParameterDirection.InputOutput || p.Direction == ParameterDirection.Output)
                    {
                        //output parameter
                        commandText += " output";
                    }
                }
            }

            var result = this.Database.SqlQuery<TEntity>(commandText, parameters).ToList();

            //performance hack applied as described here - http://www.nopcommerce.com/boards/t/25483/fix-very-important-speed-improvement.aspx
            bool acd = this.Configuration.AutoDetectChangesEnabled;
            try
            {
                this.Configuration.AutoDetectChangesEnabled = false;

                for (int i = 0; i < result.Count; i++)
                    result[i] = AttachEntityToContext(result[i]);
            }
            finally
            {
                this.Configuration.AutoDetectChangesEnabled = acd;
            }

            return result;
        }

        public IEnumerable<TElement> SqlQuery<TElement>(string sql, params object[] parameters)
        {
            return this.Database.SqlQuery<TElement>(sql, parameters);
        }

        public DataTable SqlQuery(string sql, bool isStoredProcedure, params object[] parameters)
        {
            var cmd = new SqlCommand();
            var ds = new DataSet();
            var conn = this.Database.Connection;
            if (conn.State != ConnectionState.Open)
                conn.Open();
            cmd.Connection = (SqlConnection)conn;
            cmd.CommandText = sql;
            cmd.CommandType = isStoredProcedure ? CommandType.StoredProcedure : CommandType.Text;
            if (parameters != null)
            {
                foreach (var parm in parameters)
                    cmd.Parameters.Add(parm);
            }
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = cmd;
            adapter.Fill(ds);
            return ds.Tables[0];
        }

        public DataTable SqlQuery(string sql, params object[] parameters)
        {
            var cmd = new SqlCommand();
            var ds = new DataSet();
            var conn = this.Database.Connection;
            if (conn.State != ConnectionState.Open)
                conn.Open();
            cmd.Connection = (SqlConnection)conn;
            cmd.CommandText = sql;
            cmd.CommandType = CommandType.Text;
            if (parameters != null)
            {
                foreach (var parm in parameters)
                    cmd.Parameters.Add(parm);
            }
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = cmd;
            adapter.Fill(ds);
            return ds.Tables[0];
        }

        public int ExecuteSqlCommand(string sql, bool doNotEnsureTransaction = false, int? timeout = null, params object[] parameters)
        {
            int? previousTimeout = null;
            if (timeout.HasValue)
            {
                previousTimeout = ((IObjectContextAdapter)this).ObjectContext.CommandTimeout;
                ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = timeout;
            }

            var transactionalBehavior = doNotEnsureTransaction
                ? TransactionalBehavior.DoNotEnsureTransaction
                : TransactionalBehavior.EnsureTransaction;
            var result = this.Database.ExecuteSqlCommand(transactionalBehavior, sql, parameters);

            if (timeout.HasValue)
            {
                ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = previousTimeout;
            }

            return result;
        }

        public DbConnection GetDbConnection()
        {
            return ((IObjectContextAdapter)this).ObjectContext.Connection;
        }
        #endregion
    }
}
